// --- Classe Manutencao ---
class Manutencao {
    constructor(data, tipo, custo, descricao = '') {
        // Armazena a data como objeto Date internamente
        this.data = data instanceof Date ? data : new Date(data);
        // Garante que mesmo uma data inv√°lida seja armazenada como Invalid Date
        if (isNaN(this.data.getTime())) {
            console.warn("Data fornecida resultou em data inv√°lida:", data);
            // this.data = null; // Ou mant√©m como Invalid Date
        }
        this.tipo = tipo.trim();
        this.custo = parseFloat(custo) || 0; // Garante que custo seja n√∫mero, 0 se inv√°lido
        this.descricao = descricao.trim();
        // ID √∫nico mais robusto
        this.id = `man-${Date.now().toString(36)}-${Math.random().toString(36).substring(2, 9)}`;
    }

    validar() {
        const erros = [];
        // Verifica se a data √© um objeto Date v√°lido
        if (!(this.data instanceof Date) || isNaN(this.data.getTime())) {
            erros.push("Data inv√°lida.");
        }
        if (!this.tipo) { // Verifica se tipo n√£o √© vazio ap√≥s trim
            erros.push("Tipo de servi√ßo √© obrigat√≥rio.");
        }
        // Custo pode ser zero (ex: servi√ßo na garantia), mas n√£o negativo
        if (this.custo < 0) {
            erros.push("Custo n√£o pode ser negativo.");
        }
        return erros; // Retorna array de erros (vazio se v√°lido)
    }

    formatar(incluirVeiculo = false, nomeVeiculo = '') {
        let dataFormatada = "Data inv√°lida";
        if (this.data instanceof Date && !isNaN(this.data.getTime())) {
             dataFormatada = this.data.toLocaleString('pt-BR', {
                day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'
            });
        }

        const custoFormatado = this.custo.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });

        let str = `<strong>${this.tipo}</strong> em ${dataFormatada} - ${custoFormatado}`;
        if (this.descricao) {
            str += ` <em>(${this.descricao})</em>`;
        }
         if (incluirVeiculo && nomeVeiculo) {
            str += ` - [Ve√≠culo: ${nomeVeiculo}]`;
        }
        return str;
    }

    // M√©todo para serializa√ß√£o em JSON (salva data como ISO string)
    toJSON() {
        return {
            // Salva a data como string ISO 8601 se for v√°lida, sen√£o null
            data: (this.data instanceof Date && !isNaN(this.data.getTime())) ? this.data.toISOString() : null,
            tipo: this.tipo,
            custo: this.custo,
            descricao: this.descricao,
            id: this.id // Inclui o ID na serializa√ß√£o
        };
    }
}

// --- Classes de Ve√≠culos (Modificadas e Melhoradas) ---
class Veiculo {
    constructor(modelo, cor, id = null, tipoVeiculo = 'Veiculo') {
        this.id = id || `veh-${Date.now().toString(36)}-${Math.random().toString(36).substring(2, 9)}`;
        this.modelo = modelo.trim();
        this.cor = cor.trim();
        this.ligado = false;
        this.velocidade = 0;
        this.historicoManutencao = []; // Array para objetos Manutencao
        this.tipoVeiculo = tipoVeiculo; // Essencial para reidrata√ß√£o
    }

    ligar() {
        if (this.ligado) {
            exibirNotificacao(`${this.modelo} j√° est√° ligado.`, 'warning');
            return;
        }
        this.ligado = true;
        exibirNotificacao(`${this.modelo} ligado.`, 'info');
        atualizarInfoVeiculoNoModal(this.id); // Atualiza modal se aberto para este ve√≠culo
        salvarGaragem(); // Persiste a mudan√ßa de estado
    }

    desligar() {
        if (!this.ligado) {
            exibirNotificacao(`${this.modelo} j√° est√° desligado.`, 'warning');
            return;
        }
        this.ligado = false;
        this.velocidade = 0; // Resetar velocidade ao desligar
        exibirNotificacao(`${this.modelo} desligado.`, 'info');
        atualizarInfoVeiculoNoModal(this.id);
        salvarGaragem();
    }

    acelerar(incremento = 10) { // Valor padr√£o para incremento
        if (!this.ligado) {
            exibirNotificacao(`${this.modelo} n√£o pode acelerar, est√° desligado.`, 'error');
            return; // Importante retornar para n√£o continuar
        }
        this.velocidade += incremento;
         // Limitar velocidade m√°xima (opcional)
         // const VELOCIDADE_MAXIMA = 180;
         // if (this.velocidade > VELOCIDADE_MAXIMA) this.velocidade = VELOCIDADE_MAXIMA;

        exibirNotificacao(`${this.modelo} acelerou para ${this.velocidade} km/h.`, 'info');
        atualizarInfoVeiculoNoModal(this.id);
        // Opcional: salvarGaragem(); // Evitar salvar em a√ß√µes muito frequentes
    }

    buzinar() {
        exibirNotificacao(`${this.modelo} buzinou: üì£ Beep beep!`, 'info');
    }

    // M√©todo gen√©rico para exibir informa√ß√µes b√°sicas em HTML
    getInfoBasicaHTML() {
        return `
            <p><strong>ID:</strong> ${this.id}</p>
            <p><strong>Tipo:</strong> ${this.tipoVeiculo}</p>
            <p><strong>Modelo:</strong> ${this.modelo}</p>
            <p><strong>Cor:</strong> ${this.cor}</p>
            <p><strong>Ligado:</strong> <span class="${this.ligado ? 'status-on' : 'status-off'}">${this.ligado ? 'Sim' : 'N√£o'}</span></p>
            <p><strong>Velocidade:</strong> ${this.velocidade} km/h</p>
        `;
        // Adicionar classes CSS 'status-on' e 'status-off' para estilizar
    }

    // M√©todo a ser sobrescrito pelas classes filhas para infos espec√≠ficas
    getInfoEspecificaHTML() {
        return ''; // Vazio por padr√£o
    }

    // Combina informa√ß√µes b√°sicas e espec√≠ficas para exibi√ß√£o completa no modal
    exibirInformacoesCompletaHTML() {
        return this.getInfoBasicaHTML() + this.getInfoEspecificaHTML();
    }

    // Adiciona um objeto Manutencao ao hist√≥rico
    adicionarManutencao(manutencao) {
        if (!(manutencao instanceof Manutencao)) {
            console.error("Objeto inv√°lido passado para adicionarManutencao:", manutencao);
            exibirNotificacao("Erro interno: Tentativa de adicionar manuten√ß√£o inv√°lida.", 'error');
            return false; // Falha
        }

        const erros = manutencao.validar();
        if (erros.length > 0) {
            exibirNotificacao(`Erro ao adicionar/agendar: ${erros.join(' ')}`, 'error');
            return false; // Falha devido a dados inv√°lidos
        }

        this.historicoManutencao.push(manutencao);
        // Ordena sempre por data (mais recente primeiro, ou mais antiga - decida a ordem)
        this.historicoManutencao.sort((a, b) => b.data - a.data); // Mais recente primeiro
        // this.historicoManutencao.sort((a, b) => a.data - b.data); // Mais antiga primeiro

        const acao = manutencao.data > new Date() ? 'agendada' : 'registrada';
        exibirNotificacao(`Manuten√ß√£o (${manutencao.tipo}) ${acao} para ${this.modelo}.`, 'success');
        salvarGaragem(); // Salva o estado atualizado da garagem
        return true; // Sucesso
    }

     // Remove uma manuten√ß√£o pelo ID
     removerManutencaoPorId(manutencaoId) {
        const tamanhoAntes = this.historicoManutencao.length;
        this.historicoManutencao = this.historicoManutencao.filter(m => m.id !== manutencaoId);
        const removido = this.historicoManutencao.length < tamanhoAntes;
        if (removido) {
            salvarGaragem(); // Salva ap√≥s remover
        }
        return removido; // Retorna true se removeu, false caso contr√°rio
    }


    // Retorna o hist√≥rico formatado (array de objetos {id, html})
    getHistoricoHTML() {
        if (this.historicoManutencao.length === 0) {
            return '<p>Nenhum registro de manuten√ß√£o.</p>';
        }

        const agora = new Date();
        let html = '';

        // Ordenado por data (a ordem depende do sort em adicionarManutencao)
        // Separar por Passado e Futuro para clareza
        const passadas = this.historicoManutencao.filter(m => m.data <= agora);
        const futuras = this.historicoManutencao.filter(m => m.data > agora);

        if (passadas.length > 0) {
            html += '<h4>Hist√≥rico Passado</h4>';
            passadas.forEach(m => {
                html += `<div class="maintenance-item" data-id="${m.id}">
                           <span>${m.formatar()}</span>
                           <button class="small-warning" onclick="removerManutencao('${this.id}', '${m.id}')" title="Remover este registro">Remover</button>
                         </div>`;
            });
        }

        if (futuras.length > 0) {
            html += '<h4>Agendamentos Futuros</h4>';
            futuras.forEach(m => {
                 html += `<div class="schedule-item" data-id="${m.id}">
                            <span>${m.formatar()}</span>
                            <button class="small-warning" onclick="removerManutencao('${this.id}', '${m.id}')" title="Cancelar este agendamento">Cancelar</button>
                          </div>`;
            });
        }

         if (!html) { // Caso s√≥ tenha manuten√ß√µes com data inv√°lida (raro)
             return '<p>Nenhum registro de manuten√ß√£o v√°lido encontrado.</p>';
         }

        return html;
    }

    // M√©todo est√°tico para reidrata√ß√£o a partir de JSON gen√©rico
    static fromJSON(json) {
        if (!json || !json.tipoVeiculo) {
            console.error("Tentativa de reidratar ve√≠culo a partir de JSON inv√°lido:", json);
            return null; // Retorna null se o JSON for inv√°lido
        }

        let veiculo;
        try {
            // Cria a inst√¢ncia da classe correta
            switch (json.tipoVeiculo) {
                case 'Carro':
                    veiculo = new Carro(json.modelo, json.cor, json.id);
                    break;
                case 'CarroEsportivo':
                    veiculo = new CarroEsportivo(json.modelo, json.cor, json.turbo, json.id);
                    break;
                case 'Caminhao':
                    veiculo = new Caminhao(json.modelo, json.cor, json.capacidadeCarga, json.cargaAtual, json.id);
                    // Carga atual pode precisar de fallback se n√£o existir no JSON antigo
                    veiculo.cargaAtual = json.cargaAtual || 0;
                    break;
                default:
                    console.warn(`Tipo de ve√≠culo desconhecido no JSON: ${json.tipoVeiculo}. Criando como Veiculo base.`);
                    // Cria como Veiculo base, mas mant√©m o tipo original para evitar perda de dados
                    veiculo = new Veiculo(json.modelo, json.cor, json.id, json.tipoVeiculo);
            }

            // Restaura propriedades comuns
            veiculo.ligado = json.ligado || false;
            veiculo.velocidade = json.velocidade || 0;

            // Reidrata o hist√≥rico de manuten√ß√£o
            if (json.historicoManutencao && Array.isArray(json.historicoManutencao)) {
                veiculo.historicoManutencao = json.historicoManutencao.map(mJson => {
                    if (!mJson || !mJson.data || !mJson.tipo) { // Valida√ß√£o b√°sica do objeto manuten√ß√£o
                        console.warn("Registro de manuten√ß√£o inv√°lido encontrado no JSON:", mJson);
                        return null; // Ignora registros inv√°lidos
                    }
                    // Cria nova inst√¢ncia de Manutencao a partir do JSON
                    const manutencao = new Manutencao(mJson.data, mJson.tipo, mJson.custo, mJson.descricao);
                     // Restaura o ID original da manuten√ß√£o, se existir
                     if (mJson.id) {
                         manutencao.id = mJson.id;
                     }
                     // Verifica se a data foi carregada corretamente
                     if (isNaN(manutencao.data.getTime())) {
                         console.warn(`Manuten√ß√£o ${manutencao.id || mJson.tipo} carregada com data inv√°lida.`);
                         // Poderia optar por descartar aqui (return null) ou manter
                     }
                    return manutencao;
                }).filter(m => m !== null); // Remove os nulos (inv√°lidos)

                // Reordena ap√≥s carregar
                veiculo.historicoManutencao.sort((a, b) => b.data - a.data); // Mais recente primeiro
            } else {
                veiculo.historicoManutencao = []; // Garante que seja um array vazio
            }

            return veiculo;

        } catch (error) {
            console.error(`Erro ao reidratar ve√≠culo ${json.id || '(sem id)'} do tipo ${json.tipoVeiculo}:`, error);
            // Em caso de erro na reidrata√ß√£o, retorna null para evitar quebrar a aplica√ß√£o
            return null;
        }
    }

    // M√©todo para serializa√ß√£o em JSON (garante que tipoVeiculo seja salvo)
    toJSON() {
        return {
            id: this.id,
            modelo: this.modelo,
            cor: this.cor,
            ligado: this.ligado,
            velocidade: this.velocidade,
            // Mapeia cada manuten√ß√£o usando seu pr√≥prio toJSON
            historicoManutencao: this.historicoManutencao.map(m => m.toJSON()),
            tipoVeiculo: this.tipoVeiculo // Essencial para fromJSON funcionar
        };
    }
}

// Classe Carro (Herda de Veiculo)
class Carro extends Veiculo {
    constructor(modelo, cor, id = null) {
        super(modelo, cor, id, 'Carro'); // Passa o tipoVeiculo espec√≠fico
    }
    // N√£o precisa sobrescrever getInfoEspecificaHTML se n√£o houver info extra
    // O toJSON da classe pai √© suficiente se n√£o houver props extras
}

// Classe CarroEsportivo (Herda de Veiculo)
class CarroEsportivo extends Veiculo {
    constructor(modelo, cor, turbo = false, id = null) {
        super(modelo, cor, id, 'CarroEsportivo');
        this.turbo = turbo;
    }

    ativarTurbo() {
        if (this.turbo) {
            exibirNotificacao('Turbo j√° est√° ativado!', 'warning');
            return;
        }
         if (!this.ligado) {
             exibirNotificacao('Ligue o carro esportivo antes de ativar o turbo!', 'error');
             return;
         }
        this.turbo = true;
        exibirNotificacao('üöÄ Turbo ativado!', 'success');
        atualizarInfoVeiculoNoModal(this.id);
        salvarGaragem(); // Persiste mudan√ßa
    }

    desativarTurbo() {
        if (!this.turbo) {
            exibirNotificacao('Turbo j√° est√° desativado!', 'warning');
            return;
        }
        this.turbo = false;
        exibirNotificacao('Turbo desativado.', 'info');
        atualizarInfoVeiculoNoModal(this.id);
        salvarGaragem(); // Persiste mudan√ßa
    }

    // Sobrescreve para adicionar info do turbo
    getInfoEspecificaHTML() {
        return `<p><strong>Turbo:</strong> <span class="status-${this.turbo ? 'on' : 'off'}">${this.turbo ? 'Ativado' : 'Desativado'}</span></p>`;
    }

    // Sobrescreve toJSON para incluir a propriedade 'turbo'
    toJSON() {
        const json = super.toJSON(); // Pega o JSON da classe pai
        json.turbo = this.turbo;    // Adiciona a propriedade espec√≠fica
        return json;
    }
}

// Classe Caminhao (Herda de Veiculo)
class Caminhao extends Veiculo {
    constructor(modelo, cor, capacidadeCarga, cargaAtual = 0, id = null) {
        super(modelo, cor, id, 'Caminhao');
        // Garante que capacidade e carga sejam n√∫meros n√£o negativos
        this.capacidadeCarga = Math.max(0, parseFloat(capacidadeCarga) || 0);
        this.cargaAtual = Math.max(0, parseFloat(cargaAtual) || 0);
    }

    // Valida o peso a ser carregado/descarregado
    _validarPeso(peso) {
         const pesoNumerico = parseFloat(peso);
         if (isNaN(pesoNumerico) || pesoNumerico <= 0) {
             exibirNotificacao('Peso inv√°lido. Insira um n√∫mero positivo.', 'error');
             return null; // Retorna null se inv√°lido
         }
         return pesoNumerico;
    }

    carregar(peso) {
        const pesoNumerico = this._validarPeso(peso);
        if (pesoNumerico === null) return; // Sai se peso inv√°lido

        if (this.cargaAtual + pesoNumerico <= this.capacidadeCarga) {
            this.cargaAtual += pesoNumerico;
            exibirNotificacao(`Caminh√£o carregado com ${pesoNumerico.toLocaleString('pt-BR')} kg. Carga atual: ${this.cargaAtual.toLocaleString('pt-BR')} kg.`, 'success');
            atualizarInfoVeiculoNoModal(this.id);
            salvarGaragem(); // Persiste mudan√ßa
        } else {
            const espacoLivre = this.capacidadeCarga - this.cargaAtual;
            exibirNotificacao(`Carga (${pesoNumerico.toLocaleString('pt-BR')}kg) excede a capacidade! Espa√ßo livre: ${espacoLivre.toLocaleString('pt-BR')}kg.`, 'error');
        }
    }

    descarregar(peso) {
        const pesoNumerico = this._validarPeso(peso);
         if (pesoNumerico === null) return; // Sai se peso inv√°lido

        if (this.cargaAtual >= pesoNumerico) {
            this.cargaAtual -= pesoNumerico;
            exibirNotificacao(`Caminh√£o descarregado em ${pesoNumerico.toLocaleString('pt-BR')} kg. Carga atual: ${this.cargaAtual.toLocaleString('pt-BR')} kg.`, 'success');
            atualizarInfoVeiculoNoModal(this.id);
            salvarGaragem(); // Persiste mudan√ßa
        } else {
            exibirNotificacao(`N√£o √© poss√≠vel descarregar ${pesoNumerico.toLocaleString('pt-BR')}kg. Carga atual √© ${this.cargaAtual.toLocaleString('pt-BR')}kg.`, 'error');
        }
    }

    // Sobrescreve para adicionar info da carga
    getInfoEspecificaHTML() {
        const percentualCarga = this.capacidadeCarga > 0 ? (this.cargaAtual / this.capacidadeCarga) * 100 : 0;
        return `
            <p><strong>Capacidade:</strong> ${this.capacidadeCarga.toLocaleString('pt-BR')} kg</p>
            <p><strong>Carga Atual:</strong> ${this.cargaAtual.toLocaleString('pt-BR')} kg (${percentualCarga.toFixed(1)}%)</p>
            <!-- Opcional: Barra de progresso da carga -->
            <progress value="${this.cargaAtual}" max="${this.capacidadeCarga}" style="width: 100%; height: 15px;"></progress>
        `;
    }

    // Sobrescreve toJSON para incluir propriedades do caminh√£o
    toJSON() {
        const json = super.toJSON();
        json.capacidadeCarga = this.capacidadeCarga;
        json.cargaAtual = this.cargaAtual;
        return json;
    }
}

// --- Gerenciamento da Garagem e LocalStorage ---
let garagem = []; // Array para armazenar as inst√¢ncias dos ve√≠culos
const STORAGE_KEY = 'minhaGaragemInteligente_v2'; // Mudar a chave se a estrutura de dados mudar significativamente

function salvarGaragem() {
    try {
        // Usa o m√©todo toJSON de cada ve√≠culo para garantir a serializa√ß√£o correta
        const garagemJSON = JSON.stringify(garagem.map(v => v.toJSON()));
        localStorage.setItem(STORAGE_KEY, garagemJSON);
        // console.log("Garagem salva:", garagemJSON); // Log para debug (pode ser extenso)
    } catch (error) {
        console.error("Erro cr√≠tico ao salvar garagem no LocalStorage:", error);
        // Tenta notificar o usu√°rio sobre o problema
        exibirNotificacao("ERRO GRAVE: N√£o foi poss√≠vel salvar os dados da garagem. Altera√ß√µes recentes podem ser perdidas ao fechar.", 'error', 0); // 0 = n√£o esconder automaticamente
    }
}

function carregarGaragem() {
    try {
        const garagemJSON = localStorage.getItem(STORAGE_KEY);
        if (garagemJSON) {
            const garagemGenerica = JSON.parse(garagemJSON);
            // Reidrata os objetos: transforma JSON gen√©rico em inst√¢ncias de classes
            garagem = garagemGenerica.map(veiculoJSON => Veiculo.fromJSON(veiculoJSON))
                                    .filter(v => v !== null); // Filtra ve√≠culos que falharam na reidrata√ß√£o

            // console.log(`Garagem carregada: ${garagem.length} ve√≠culos.`); // Log para debug
             if (garagem.length !== garagemGenerica.length) {
                console.warn("Alguns ve√≠culos n√£o puderam ser carregados corretamente do LocalStorage.");
                exibirNotificacao("Aviso: Alguns dados de ve√≠culos podem n√£o ter sido carregados corretamente.", 'warning');
             }
        } else {
            garagem = []; // Inicia vazia se n√£o houver nada salvo
            // console.log("Nenhuma garagem salva encontrada. Iniciando vazia.");
        }
    } catch (error) {
        console.error("Erro ao carregar ou parsear garagem do LocalStorage:", error);
        exibirNotificacao("Erro ao carregar dados da garagem. Verifique o console para detalhes. Iniciando com garagem vazia.", 'error');
        garagem = []; // Reseta em caso de erro grave de parse para evitar mais problemas
        // Opcional: tentar limpar o localStorage corrompido
        // localStorage.removeItem(STORAGE_KEY);
    }
    // Atualiza a UI ap√≥s carregar/falhar
    renderizarGaragem();
    renderizarAgendamentosFuturos();
    verificarAgendamentosProximos(); // Verifica lembretes ao iniciar
}

// --- Fun√ß√µes de Renderiza√ß√£o da UI ---

function renderizarGaragem() {
    const listaVeiculosDiv = document.getElementById('listaVeiculos');
    listaVeiculosDiv.innerHTML = ''; // Limpa a lista atual

    if (garagem.length === 0) {
        listaVeiculosDiv.innerHTML = '<p style="text-align: center; color: #777;">Sua garagem est√° vazia. Adicione um ve√≠culo acima!</p>';
        return;
    }

    // Ordena a garagem (ex: por modelo) antes de renderizar - opcional
    garagem.sort((a, b) => a.modelo.localeCompare(b.modelo));

    garagem.forEach(veiculo => {
        const itemDiv = document.createElement('div');
        itemDiv.classList.add('vehicle-item');
        itemDiv.setAttribute('data-id', veiculo.id); // Adiciona ID para refer√™ncia futura
        itemDiv.innerHTML = `
            <span><strong style="color: #2980b9;">${veiculo.modelo}</strong> (${veiculo.tipoVeiculo}) - Cor: ${veiculo.cor}</span>
            <div class="actions">
                <button onclick="abrirModalDetalhes('${veiculo.id}')" title="Ver detalhes, hist√≥rico e agendar manuten√ß√£o">Detalhes / Manuten√ß√£o</button>
                <button class="warning" onclick="removerVeiculo('${veiculo.id}')" title="Remover ve√≠culo permanentemente">Remover</button>
            </div>
        `;
        listaVeiculosDiv.appendChild(itemDiv);
    });
}

function renderizarHistoricoManutencaoModal(veiculoId) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    const historicoDiv = document.getElementById('modalHistoricoManutencao');

    if (!veiculo) {
        console.error("Ve√≠culo n√£o encontrado para renderizar hist√≥rico:", veiculoId);
        historicoDiv.innerHTML = '<p>Erro: Ve√≠culo n√£o encontrado.</p>';
        return;
    }

    historicoDiv.innerHTML = veiculo.getHistoricoHTML(); // Usa o m√©todo da classe
}

function renderizarAgendamentosFuturos() {
    const listaAgendamentosDiv = document.getElementById('listaAgendamentosFuturos');
    listaAgendamentosDiv.innerHTML = '';
    const agora = new Date();
    let agendamentos = [];

    // Coleta todos os agendamentos futuros de todos os ve√≠culos
    garagem.forEach(veiculo => {
        veiculo.historicoManutencao.forEach(manutencao => {
            // Verifica se a data √© v√°lida e futura
            if (manutencao.data instanceof Date && !isNaN(manutencao.data.getTime()) && manutencao.data > agora) {
                agendamentos.push({ veiculo: veiculo, manutencao: manutencao });
            }
        });
    });

    // Ordena por data (mais pr√≥ximo primeiro)
    agendamentos.sort((a, b) => a.manutencao.data - b.manutencao.data);

    if (agendamentos.length === 0) {
        listaAgendamentosDiv.innerHTML = '<p style="text-align: center; color: #777;">Nenhum agendamento futuro.</p>';
        return;
    }

    agendamentos.forEach(item => {
        const itemDiv = document.createElement('div');
        itemDiv.classList.add('schedule-item');
         itemDiv.setAttribute('data-id', item.manutencao.id);
        // Formata a manuten√ß√£o incluindo o nome do ve√≠culo
        itemDiv.innerHTML = `
            <span>${item.manutencao.formatar(true, `${item.veiculo.modelo} (${item.veiculo.cor})`)}</span>
            <button class="small-warning" onclick="removerManutencao('${item.veiculo.id}', '${item.manutencao.id}')" title="Cancelar este agendamento">Cancelar</button>
       `;
        listaAgendamentosDiv.appendChild(itemDiv);
    });
}

// --- Fun√ß√µes do Modal e A√ß√µes do Ve√≠culo ---

const modal = document.getElementById('modalDetalhesVeiculo');
const modalContent = modal.querySelector('.modal-content'); // Para anima√ß√£o de fechar

function abrirModalDetalhes(veiculoId) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) {
        exibirNotificacao("Erro: Ve√≠culo n√£o encontrado.", "error");
        return;
    }

    document.getElementById('modalTituloVeiculo').textContent = `Detalhes: ${veiculo.modelo} (${veiculo.cor})`;
    document.getElementById('manutencaoVeiculoId').value = veiculoId; // Associa formul√°rio ao ve√≠culo

    atualizarInfoVeiculoNoModal(veiculoId); // Popula infos e bot√µes de a√ß√£o
    renderizarHistoricoManutencaoModal(veiculoId); // Popula hist√≥rico e agendamentos do ve√≠culo

    // Limpa e configura formul√°rio de manuten√ß√£o
    const formManutencao = document.getElementById('formManutencao');
    formManutencao.reset();
    // Configura o datepicker para o campo de data
    flatpickr("#manutencaoData", {
        enableTime: true,
        dateFormat: "Y-m-d H:i", // Formato ISO compat√≠vel com new Date()
        minDate: "today", // Impede agendar no passado (opcional)
        locale: "pt" // Usa localiza√ß√£o em portugu√™s (requer script de localiza√ß√£o)
    });

    modal.style.display = 'block';
    // Adiciona classe para anima√ß√£o de entrada (se houver)
    modalContent.classList.add('animate-in'); // Crie a anima√ß√£o CSS correspondente
}

function fecharModal() {
    // Adiciona classe para anima√ß√£o de sa√≠da (opcional)
    modalContent.classList.add('animate-out');

    // Espera a anima√ß√£o terminar antes de esconder o modal
    // setTimeout(() => {
        modal.style.display = 'none';
        modalContent.classList.remove('animate-in', 'animate-out'); // Limpa classes de anima√ß√£o
    // }, 300); // Tempo deve corresponder √† dura√ß√£o da anima√ß√£o CSS 'animate-out'
}

// Fecha o modal se clicar fora do conte√∫do (no fundo escuro)
window.onclick = function(event) {
    if (event.target == modal) {
        fecharModal();
    }
}
// Fecha o modal ao pressionar a tecla ESC
window.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && modal.style.display === 'block') {
        fecharModal();
    }
});

function atualizarInfoVeiculoNoModal(veiculoId) {
    // S√≥ atualiza se o modal estiver vis√≠vel e for o ve√≠culo correto
    if (modal.style.display !== 'block' || document.getElementById('manutencaoVeiculoId').value !== veiculoId) {
        return;
    }

    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) return; // Seguran√ßa extra

    const infoDiv = document.getElementById('modalInfoVeiculo');
    const acoesDiv = document.getElementById('modalAcoesVeiculo');

    infoDiv.innerHTML = veiculo.exibirInformacoesCompletaHTML(); // Usa o m√©todo da classe
    acoesDiv.innerHTML = ''; // Limpa a√ß√µes anteriores para reconstruir

    // Bot√µes de A√ß√£o Comuns
    if (!veiculo.ligado) {
        acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'ligar')" title="Ligar o motor"><span role="img" aria-label="Chave">üîë</span> Ligar</button>`;
    } else {
        acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'desligar')" title="Desligar o motor"><span role="img" aria-label="Bot√£o Power Off">üîå</span> Desligar</button>`;
        acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'acelerar', 10)" title="Aumentar velocidade em 10 km/h"><span role="img" aria-label="Pedal">üí®</span> Acelerar (+10)</button>`;
    }
    acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'buzinar')" title="Tocar a buzina"><span role="img" aria-label="Megafone">üì£</span> Buzinar</button>`;

    // Bot√µes de A√ß√£o Espec√≠ficos por Tipo
    if (veiculo instanceof CarroEsportivo) {
        if (!veiculo.turbo) {
            acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'ativarTurbo')" title="Ativar o turbo (requer motor ligado)"><span role="img" aria-label="Foguete">üöÄ</span> Ativar Turbo</button>`;
        } else {
            acoesDiv.innerHTML += `<button onclick="executarAcaoVeiculo('${veiculo.id}', 'desativarTurbo')" title="Desativar o turbo"><span role="img" aria-label="Caracol">üêå</span> Desativar Turbo</button>`;
        }
    } else if (veiculo instanceof Caminhao) {
        // Cria um container flex para os controles de carga
        const cargaContainer = document.createElement('div');
        cargaContainer.style.display = 'flex';
        cargaContainer.style.alignItems = 'center';
        cargaContainer.style.marginTop = '10px'; // Espa√ßamento
        cargaContainer.innerHTML = `
            <input type="number" id="pesoCargaModal_${veiculo.id}" placeholder="Peso (kg)" min="1" style="width: 120px; margin-right: 5px; padding: 8px;" title="Digite o peso para carregar ou descarregar">
            <button onclick="executarAcaoVeiculo('${veiculo.id}', 'carregar')" title="Adicionar carga ao caminh√£o"><span role="img" aria-label="Seta para cima">‚¨ÜÔ∏è</span> Carregar</button>
            <button onclick="executarAcaoVeiculo('${veiculo.id}', 'descarregar')" title="Remover carga do caminh√£o"><span role="img" aria-label="Seta para baixo">‚¨áÔ∏è</span> Descarregar</button>
        `;
         acoesDiv.appendChild(cargaContainer);
    }
}

// Fun√ß√£o gen√©rica para chamar m√©todos do ve√≠culo a partir da UI
function executarAcaoVeiculo(veiculoId, acao, param = null) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) {
         exibirNotificacao("Erro interno: Ve√≠culo n√£o encontrado para executar a√ß√£o.", "error");
         return;
     }

    // Tratamento especial para carregar/descarregar caminh√£o para pegar o valor do input
    if ((acao === 'carregar' || acao === 'descarregar') && veiculo instanceof Caminhao) {
        const inputPeso = document.getElementById(`pesoCargaModal_${veiculo.id}`);
        if (!inputPeso) {
            console.error("Input de peso n√£o encontrado no modal para caminh√£o.");
            return;
        }
        param = inputPeso.value; // Pega o valor atual do input
        // A valida√ß√£o do peso √© feita dentro dos m√©todos carregar/descarregar agora
        // if (!param) { // Verifica se o campo est√° vazio
        //     exibirNotificacao("Por favor, insira um peso para carregar/descarregar.", "warning");
        //     inputPeso.focus(); // Foca no campo
        //     return;
        // }
         inputPeso.value = ''; // Limpa o campo ap√≥s usar (ou n√£o, dependendo da prefer√™ncia)
    }

    // Verifica se o m√©todo existe no objeto ve√≠culo
    if (typeof veiculo[acao] === 'function') {
        try {
            veiculo[acao](param); // Chama o m√©todo correspondente (passando param mesmo que seja null)
            // Os m√©todos das classes (ligar, desligar, carregar, etc.) j√° devem:
            // 1. Fazer suas valida√ß√µes internas.
            // 2. Chamar exibirNotificacao com feedback.
            // 3. Chamar atualizarInfoVeiculoNoModal(this.id).
            // 4. Chamar salvarGaragem().
        } catch (error) {
             console.error(`Erro ao executar a√ß√£o '${acao}' no ve√≠culo ${veiculo.id}:`, error);
             exibirNotificacao(`Erro ao executar ${acao}: ${error.message}`, 'error');
        }
    } else {
        console.error(`A√ß√£o '${acao}' n√£o √© uma fun√ß√£o v√°lida no ve√≠culo ${veiculo.id}`);
        exibirNotificacao(`Erro interno: A√ß√£o '${acao}' desconhecida.`, 'error');
    }
}

// --- Manipula√ß√£o de Formul√°rios e Eventos ---

// Formul√°rio Adicionar Ve√≠culo
const formAdicionarVeiculo = document.getElementById('formAdicionarVeiculo');
formAdicionarVeiculo.addEventListener('submit', function(event) {
    event.preventDefault(); // Impede recarregamento da p√°gina

    const tipo = document.getElementById('tipoVeiculo').value;
    const modelo = document.getElementById('modeloVeiculo').value;
    const cor = document.getElementById('corVeiculo').value;

    // Valida√ß√£o b√°sica dos campos comuns
    if (!tipo || !modelo.trim() || !cor.trim()) {
         exibirNotificacao("Por favor, preencha tipo, modelo e cor do ve√≠culo.", 'warning');
         return;
    }

    let novoVeiculo;
    try {
        switch (tipo) {
            case 'Carro':
                novoVeiculo = new Carro(modelo, cor);
                break;
            case 'CarroEsportivo':
                novoVeiculo = new CarroEsportivo(modelo, cor);
                break;
            case 'Caminhao':
                const capacidadeInput = document.getElementById('capacidadeCargaVeiculo');
                const capacidade = capacidadeInput.value;
                // Valida√ß√£o espec√≠fica para caminh√£o
                if (!capacidade || isNaN(parseFloat(capacidade)) || parseFloat(capacidade) < 0) {
                    exibirNotificacao("Capacidade de carga inv√°lida para o caminh√£o.", 'error');
                    capacidadeInput.focus(); // Foca no campo problem√°tico
                    return; // Interrompe a cria√ß√£o
                }
                novoVeiculo = new Caminhao(modelo, cor, capacidade);
                break;
            default:
                exibirNotificacao("Tipo de ve√≠culo selecionado √© inv√°lido.", 'error');
                return; // Sai da fun√ß√£o
        }

        garagem.push(novoVeiculo);
        salvarGaragem();
        renderizarGaragem(); // Atualiza a lista na tela principal
        exibirNotificacao(`Ve√≠culo ${modelo} adicionado com sucesso!`, 'success');
        formAdicionarVeiculo.reset(); // Limpa o formul√°rio
        document.getElementById('campoCapacidadeCarga').style.display = 'none'; // Esconde campo do caminh√£o

    } catch (error) {
        console.error("Erro ao criar ou adicionar ve√≠culo:", error);
        exibirNotificacao(`Erro ao adicionar ve√≠culo: ${error.message}`, 'error');
    }
});

// Mostra/Esconde campo de capacidade ao mudar tipo de ve√≠culo
document.getElementById('tipoVeiculo').addEventListener('change', function() {
    const campoCapacidadeDiv = document.getElementById('campoCapacidadeCarga');
    const capacidadeInput = document.getElementById('capacidadeCargaVeiculo');
    const show = (this.value === 'Caminhao');

    campoCapacidadeDiv.style.display = show ? 'block' : 'none';
    capacidadeInput.required = show; // Torna obrigat√≥rio apenas se for caminh√£o
     if (!show) {
         capacidadeInput.value = ''; // Limpa o valor se n√£o for caminh√£o
     }
});

// Formul√°rio Adicionar/Agendar Manuten√ß√£o (dentro do Modal)
const formManutencao = document.getElementById('formManutencao');
formManutencao.addEventListener('submit', function(event) {
    event.preventDefault();

    const veiculoId = document.getElementById('manutencaoVeiculoId').value;
    const dataInput = document.getElementById('manutencaoData');
    const tipoInput = document.getElementById('manutencaoTipo');
    const custoInput = document.getElementById('manutencaoCusto');
    const descricaoInput = document.getElementById('manutencaoDescricao');

    const veiculo = garagem.find(v => v.id === veiculoId);

    if (!veiculo) {
        exibirNotificacao("Erro: Ve√≠culo n√£o encontrado para adicionar manuten√ß√£o.", 'error');
        return;
    }

    // Coleta valores
    const data = dataInput.value;
    const tipo = tipoInput.value;
    const custo = custoInput.value;
    const descricao = descricaoInput.value;

     // Valida√ß√£o b√°sica no formul√°rio (antes de criar o objeto)
     if (!data || !tipo.trim() || custo === '' || parseFloat(custo) < 0) {
         exibirNotificacao("Preencha Data, Tipo e Custo (n√£o negativo) corretamente.", 'warning');
         return;
     }


    try {
        // Cria a inst√¢ncia (a classe Manutencao tamb√©m valida internamente)
        const novaManutencao = new Manutencao(data, tipo, custo, descricao);

        // Tenta adicionar ao hist√≥rico do ve√≠culo (m√©todo j√° valida, salva e notifica)
        const adicionadoComSucesso = veiculo.adicionarManutencao(novaManutencao);

        if (adicionadoComSucesso) {
            renderizarHistoricoManutencaoModal(veiculoId); // Atualiza a lista no modal
            renderizarAgendamentosFuturos(); // Atualiza lista geral de agendamentos
            formManutencao.reset(); // Limpa o formul√°rio
            // Fecha o datepicker se estiver aberto (caso use Flatpickr)
            const fpInstance = dataInput._flatpickr;
            if (fpInstance) fpInstance.close();
            verificarAgendamentosProximos(); // Re-verifica lembretes
        }
        // Se n√£o adicionou com sucesso, a notifica√ß√£o de erro j√° foi exibida por adicionarManutencao

    } catch (error) {
        console.error("Erro ao criar ou adicionar manuten√ß√£o via formul√°rio:", error);
        exibirNotificacao(`Erro no formul√°rio de manuten√ß√£o: ${error.message}`, 'error');
    }
});

// Fun√ß√£o para remover ve√≠culo da garagem
function removerVeiculo(veiculoId) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) {
         exibirNotificacao("Erro: Ve√≠culo n√£o encontrado para remo√ß√£o.", "error");
         return;
     }

    // Confirma√ß√£o mais expl√≠cita
    if (confirm(`ATEN√á√ÉO!\nTem certeza que deseja remover PERMANENTEMENTE o ve√≠culo "${veiculo.modelo} (${veiculo.cor})"?\n\nTodo o hist√≥rico de manuten√ß√£o ser√° perdido.`)) {
        garagem = garagem.filter(v => v.id !== veiculoId); // Remove da lista
        salvarGaragem(); // Persiste a remo√ß√£o
        renderizarGaragem(); // Atualiza a lista principal
        renderizarAgendamentosFuturos(); // Atualiza caso tivesse agendamentos
        exibirNotificacao(`Ve√≠culo ${veiculo.modelo} removido com sucesso.`, 'success');

        // Se o modal estiver aberto para este ve√≠culo, feche-o
        if (modal.style.display === 'block' && document.getElementById('manutencaoVeiculoId').value === veiculoId) {
            fecharModal();
        }
    }
}

// Fun√ß√£o para remover uma manuten√ß√£o/agendamento espec√≠fico (chamada pelos bot√µes)
function removerManutencao(veiculoId, manutencaoId) {
    const veiculo = garagem.find(v => v.id === veiculoId);
    if (!veiculo) {
         exibirNotificacao("Erro: Ve√≠culo n√£o encontrado para remover manuten√ß√£o.", "error");
         return;
     }

     // Encontra a manuten√ß√£o espec√≠fica para exibir detalhes na confirma√ß√£o
     const manutencao = veiculo.historicoManutencao.find(m => m.id === manutencaoId);
     if (!manutencao) {
         exibirNotificacao("Erro: Registro de manuten√ß√£o n√£o encontrado.", "error");
         return;
     }

    if (confirm(`Tem certeza que deseja remover o registro:\n"${manutencao.tipo}" em ${manutencao.data.toLocaleDateString()}?`)) {
        const removido = veiculo.removerManutencaoPorId(manutencaoId); // Usa o m√©todo do ve√≠culo

        if (removido) {
            exibirNotificacao('Manuten√ß√£o/Agendamento removido.', 'success');
             // Atualiza as UIs relevantes
             if (modal.style.display === 'block' && document.getElementById('manutencaoVeiculoId').value === veiculoId) {
                renderizarHistoricoManutencaoModal(veiculoId); // Atualiza no modal se aberto
             }
            renderizarAgendamentosFuturos(); // Atualiza na lista geral
            verificarAgendamentosProximos(); // Re-verifica lembretes
        } else {
            // Isso n√£o deveria acontecer se a manuten√ß√£o foi encontrada antes do confirm
            exibirNotificacao('N√£o foi poss√≠vel remover a manuten√ß√£o.', 'error');
        }
    }
}

// --- Notifica√ß√µes e Lembretes ---
let notificationTimeout; // Armazena o ID do timeout da notifica√ß√£o

function exibirNotificacao(mensagem, tipo = 'info', duracaoMs = 5000) { // Tipos: 'info', 'success', 'warning', 'error'
    const notificacaoDiv = document.getElementById('notificacoes');
    if (!notificacaoDiv) return; // Sai se o elemento n√£o existir

    notificacaoDiv.textContent = mensagem;
    notificacaoDiv.className = ''; // Limpa classes de tipo anteriores
    notificacaoDiv.classList.add(tipo); // Adiciona a classe do tipo atual
    notificacaoDiv.classList.add('show'); // Adiciona classe para mostrar (ativa transi√ß√£o)

    // Limpa timeout anterior se uma nova notifica√ß√£o chegar rapidamente
    clearTimeout(notificationTimeout);

    // Esconde a notifica√ß√£o ap√≥s a dura√ß√£o especificada (se > 0)
    if (duracaoMs > 0) {
        notificationTimeout = setTimeout(() => {
            notificacaoDiv.classList.remove('show'); // Remove classe show (ativa transi√ß√£o de sa√≠da)
            // Opcional: esconder completamente ap√≥s a transi√ß√£o CSS
             // setTimeout(() => { notificacaoDiv.style.display = 'none';}, 500); // Ajustar tempo da transi√ß√£o
        }, duracaoMs);
    }
     // Se duracaoMs for 0, a notifica√ß√£o permanecer√° vis√≠vel at√© a pr√≥xima chamada ou reload.
}

function verificarAgendamentosProximos() {
    const agora = new Date();
    const amanha = new Date(agora);
    amanha.setDate(agora.getDate() + 1);
    // Define limite: ex: pr√≥ximas 48 horas
    const limite = new Date(agora.getTime() + 2 * 24 * 60 * 60 * 1000); // 2 dias

    let lembretes = [];

    garagem.forEach(veiculo => {
        veiculo.historicoManutencao.forEach(manutencao => {
             // Verifica se data √© v√°lida, futura e dentro do limite
            if (manutencao.data instanceof Date && !isNaN(manutencao.data.getTime()) &&
                manutencao.data > agora && manutencao.data < limite)
            {
                const dataManutencao = manutencao.data;
                let quando = '';
                const hora = dataManutencao.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });

                 // Compara apenas as datas (ignorando horas)
                 const hojeStr = agora.toDateString();
                 const amanhaStr = amanha.toDateString();
                 const dataManutencaoStr = dataManutencao.toDateString();

                if (dataManutencaoStr === hojeStr) {
                    quando = `HOJE √†s ${hora}`;
                } else if (dataManutencaoStr === amanhaStr) {
                    quando = `AMANH√É √†s ${hora}`;
                } else {
                     // Para dias al√©m de amanh√£, mostra dia da semana/data
                     quando = `em ${dataManutencao.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit' })} √†s ${hora}`;
                 }

                lembretes.push(`üîî LEMBRETE: ${manutencao.tipo} (${veiculo.modelo}) ${quando}.`);
            }
        });
    });

    // Exibe os lembretes se houver algum
    if (lembretes.length > 0) {
        // Mostra um lembrete por vez ou todos concatenados
        exibirNotificacao(lembretes.join('\n'), 'warning', 10000); // Dura 10 segundos
    }
}

// --- Inicializa√ß√£o da Aplica√ß√£o ---
document.addEventListener('DOMContentLoaded', () => {
    // Verifica se Flatpickr existe antes de configurar localiza√ß√£o
    if (typeof flatpickr !== 'undefined' && flatpickr.l10ns && flatpickr.l10ns.pt) {
        flatpickr.localize(flatpickr.l10ns.pt); // Define Portugu√™s como padr√£o
    } else {
         console.warn("Flatpickr ou localiza√ß√£o 'pt' n√£o encontrados. Datepicker usar√° ingl√™s.");
    }

    carregarGaragem(); // Carrega os dados e renderiza a UI inicial

    // Configura√ß√£o inicial do campo de capacidade (caso o formul√°rio seja recarregado com 'Caminhao' selecionado)
    const tipoVeiculoSelect = document.getElementById('tipoVeiculo');
    if (tipoVeiculoSelect.value === 'Caminhao') {
        document.getElementById('campoCapacidadeCarga').style.display = 'block';
        document.getElementById('capacidadeCargaVeiculo').required = true;
    }

    console.log("Garagem Inteligente inicializada.");
});